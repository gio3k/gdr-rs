pub const LC_COLON: char = ':';
pub const LC_COMMA: char = ',';
pub const LC_OPEN_ROUND_BRACKET: char = '(';
pub const LC_CLOSE_ROUND_BRACKET: char = ')';
pub const LC_OPEN_SQUARE_BRACKET: char = '[';
pub const LC_CLOSE_SQUARE_BRACKET: char = ']';
pub const LC_OPEN_CURLY_BRACKET: char = '{';
pub const LC_CLOSE_CURLY_BRACKET: char = '}';

pub const LM_LEFT_ARROW: char = '<';
pub const LM_RIGHT_ARROW: char = '>';
pub const LM_EQUALS: char = '=';
pub const LM_EXCLAMATION_MARK: char = '!';
pub const LM_TILDE: char = '~';
pub const LM_AND: char = '&';
pub const LM_PIPE: char = '|';
pub const LM_CARET: char = '^';
pub const LM_PLUS: char = '+';
pub const LM_MINUS: char = '-';
pub const LM_FORWARD_SLASH: char = '/';
pub const LM_ASTERISK: char = '*';
pub const LM_PERCENTAGE: char = '%';
pub const LM_UNDERSCORE: char = '_';

pub const LO_MATH_SPACING: char = LM_UNDERSCORE;
pub const LO_MATH_SUBTRACT: char = LM_MINUS;
pub const LO_MATH_ADD: char = LM_PLUS;
pub const LO_MATH_DIVIDE: char = LM_FORWARD_SLASH;
pub const LO_MATH_MULTIPLY: char = LM_ASTERISK;
pub const LO_MATH_MODULO: char = LM_PERCENTAGE;
pub const LO_MATH_NEGATIVE: char = LM_MINUS;